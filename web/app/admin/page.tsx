'use client';

import { useEffect, useMemo, useState, type ReactNode } from 'react';
import Link from 'next/link';
import axios from 'axios';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';

type Task = { id:number; slug:string; title:string; cadence:'weekly'|'biweekly'; offsetWeeks?: number };
type Assignment = { id:number; planId:string; taskId:number; weekIndex:number; personId:number|null; autoGenerated:boolean };
type Person = { id:number; name:string; activeWeekly:boolean; activeBiweekly:boolean; shameCount?: number };

type AdminPlanResponse = {
  empty?: boolean;
  plan: { id:string; startsOn:string; weeks:number; status:string } | null;
  tasks: Task[];
  assignments: Assignment[];
  people: Person[];
};

/* ---------- helpers ---------- */
const iso = (d: Date) => {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const dd = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${dd}`;
};
function parseLocalDate(v: string) {
  const [y, m, d] = v.split('-').map(Number);
  return new Date(y, (m ?? 1) - 1, d ?? 1);
}
function nextOrSameMonday(from = new Date()) {
  const d = new Date(from);
  const day = d.getDay();
  const add = (8 - day) % 7;
  d.setDate(d.getDate() + add);
  d.setHours(0, 0, 0, 0);
  return d;
}
const MONDAY_BASE_ISO = '2000-01-03';

export default function AdminPage() {
  const api = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:4000';

  const [loading, setLoading] = useState(true);
  const [empty, setEmpty] = useState(false);
  const [busy, setBusy] = useState(false);

  const [plan, setPlan]               = useState<AdminPlanResponse['plan']>(null);
  const [tasks, setTasks]             = useState<Task[]>([]);
  const [assignments, setAssignments] = useState<Assignment[]>([]);
  const [people, setPeople]           = useState<Person[]>([]);

  // add person (starts with no pool flags)
  const [newName, setNewName] = useState('');

  // start date for generation
  const [startDate, setStartDate] = useState<string>("");

  // Feste/Ehren-Ämtli (admin-managed)
  type Duty = { id:number; kind:'FIXED'|'HONOR'; label:string; assignees:string; order:number };
  const [duties, setDuties] = useState<Duty[]>([]);

  async function load() {
    setLoading(true);
    try {
      const [r1, r2, r3] = await Promise.all([
        axios.get<AdminPlanResponse>(`${api}/api/admin/plan`, { headers: { 'Cache-Control':'no-store' } }),
        axios.get<Person[]>(`${api}/api/people`, { headers: { 'Cache-Control':'no-store' } }),
        axios.get<Duty[]>(`${api}/api/duties`).catch(()=>({ data: [] as Duty[] })), // tolerate missing route
      ]);
      const d = r1.data ?? {};
      setEmpty(!!d.empty || !d.plan);
      setPlan(d.plan ?? null);
      setTasks(d.tasks ?? []);
      setAssignments(d.assignments ?? []);
      setPeople(r2.data ?? []);
      setDuties(r3.data ?? []);
    } finally {
      setLoading(false);
    }
  }
  useEffect(() => { load(); /* eslint-disable-line */ }, []);

  function handleDateChange(v: string) {
    if (!v) { setStartDate(''); return; }
    const picked = parseLocalDate(v);
    if (Number.isNaN(picked.getTime())) { setStartDate(''); return; }
    if (picked.getDay() !== 1) {
      const snapped = nextOrSameMonday(picked);
      setStartDate(iso(snapped));
    } else {
      setStartDate(v);
    }
  }

  async function generate() {
    if (!startDate) { alert("Please select a start date (Montag)."); return; }
    if (!confirm("This will delete the current draft and create a new plan. Continue?")) return;
    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/generate`, { startDate });
      await load();
    } finally {
      setBusy(false);
    }
  }

  async function publish() {
    if (!plan?.id) return;
    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/${plan.id}/publish`);
      await load();
    } finally {
      setBusy(false);
    }
  }

  // People CRUD
  async function addPerson() {
    const name = newName.trim();
    if (!name) return;
    await axios.post(`${api}/api/people`, { name, activeWeekly: false, activeBiweekly: false });
    setNewName('');
    await load();
  }
  async function toggleFlag(p: Person, key: 'activeWeekly' | 'activeBiweekly') {
    await axios.patch(`${api}/api/people/${p.id}`, { [key]: !p[key] });
    await load();
  }
  async function deletePerson(p: Person) {
    if (!confirm(`“${p.name}” wirklich löschen?`)) return;
    await axios.delete(`${api}/api/people/${p.id}`);
    await load();
  }

  // Duties CRUD (admin)
  async function addDuty(kind:'FIXED'|'HONOR') {
    const label = prompt('Titel?'); if (!label) return;
    const order = (duties.filter(d=>d.kind===kind).length || 0);
    await axios.post(`${api}/api/duties`, { kind, label, assignees:'', order });
    const r = await axios.get(`${api}/api/duties`);
    setDuties(r.data||[]);
  }
  async function updateDuty(d: Duty, patch: Partial<Duty>) {
    await axios.patch(`${api}/api/duties/${d.id}`, patch);
    const r = await axios.get(`${api}/api/duties`);
    setDuties(r.data||[]);
  }
  async function deleteDuty(d: Duty) {
    if (!confirm(`“${d.label}” löschen?`)) return;
    await axios.delete(`${api}/api/duties/${d.id}`);
    setDuties(prev=>prev.filter(x=>x.id!==d.id));
  }

  function mondayLabel(week:number) {
    if (!plan?.startsOn) return '??.??';
    const start = new Date(plan.startsOn);
    start.setDate(start.getDate() + (week * 7));
    return new Intl.DateTimeFormat('de-CH', { day:'2-digit', month:'2-digit' }).format(start);
  }
  function personName(id:number|null) {
    if (id==null) return '— frei —';
    return people.find(p=>p.id===id)?.name ?? '—';
  }

  // ----- HOOKS THAT MUST RUN EVERY RENDER -----
  const cell = useMemo(() => {
    const map = new Map<number, Map<number, Assignment>>();
    for (const a of assignments) {
      const byTask = map.get(a.taskId) ?? new Map<number, Assignment>();
      byTask.set(a.weekIndex, a);
      map.set(a.taskId, byTask);
    }
    return (taskId:number, week:number) => map.get(taskId)?.get(week) || null;
  }, [assignments]);

  const cadenceByTaskId = useMemo(() => {
    const m = new Map<number, Task['cadence']>();
    for (const t of tasks) m.set(t.id, t.cadence);
    return (taskId:number) => m.get(taskId) ?? 'weekly';
  }, [tasks]);

  type CountRow = { personId:number; name:string; weekly:number; biweekly:number; total:number };
  const counts: CountRow[] = useMemo(() => {
    const base = new Map<number, CountRow>();
    for (const p of people) base.set(p.id, { personId: p.id, name: p.name, weekly: 0, biweekly: 0, total: 0 });
    for (const a of assignments) {
      if (a.personId == null) continue;
      const row = base.get(a.personId);
      if (!row) continue;
      const cad = cadenceByTaskId(a.taskId);
      if (cad === 'biweekly') row.biweekly += 1;
      else row.weekly += 1;
      row.total += 1;
    }
    return [...base.values()].sort((a,b)=>a.name.localeCompare(b.name));
  }, [assignments, people, cadenceByTaskId]);
  // ---------------------------------------------

  if (loading) return <main className="p-6">Lade…</main>;
  if (empty || !plan) {
    return (
      <main className="p-6 space-y-3">
        <div className="flex items-center gap-2">
          <input
            type="date"
            value={startDate}
            onChange={(e)=>handleDateChange(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
            {busy ? 'Erzeuge…' : 'Generate'}
          </button>
          <Link href="/" className="underline ml-2">Home</Link>
        </div>
        <p className="text-sm text-gray-600">Generating will delete the current draft (if any) and create a new plan starting on the selected date.</p>
      </main>
    );
  }

  const weeklyTasks   = tasks.filter(t=>t.cadence==='weekly');
  const biweeklyTasks = tasks.filter(t=>t.cadence==='biweekly');

  const Badge = ({ children, active }: { children: ReactNode; active: boolean }) => (
    <span className={`px-1.5 py-0.5 text-[11px] rounded ${active ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-400'}`}>
      {children}
    </span>
  );

  /* ---------- DnD (pair-aware) ---------- */
  function parseDroppable(did: string) {
    const parts = did.split(':');
    if (parts[0] === 'pair')   return { kind: 'pair' as const, a: Number(parts[1]), b: Number(parts[2]) };
    if (parts[0] === 'cell')   return { kind: 'cell' as const, id: Number(parts[1]), cadence: (parts[2] as 'weekly'|'biweekly'|undefined) };
    if (did === 'people-all')  return { kind: 'people' as const };
    return { kind: 'other' as const };
  }
  const getAssign = (id:number) => assignments.find(a=>a.id===id) || null;

  function onDragEnd(result: DropResult) {
    const { draggableId, source, destination } = result;
    if (!destination) return;

    const src = parseDroppable(source.droppableId);
    const dst = parseDroppable(destination.droppableId);

    const personFromPeople = () => Number(draggableId.replace('person-', ''));
    const personFromAssign = (id:number|null) => (id ? (getAssign(id)?.personId ?? null) : null);

    const setMany = (updates: Array<{ id:number, personId:number|null }>) => {
      setAssignments(prev => prev.map(a => {
        const u = updates.find(x => x.id === a.id);
        return u ? { ...a, personId: u.personId } : a;
      }));
    };
    const patchMany = (updates: Array<{ id:number, personId:number|null }>) => {
      updates.forEach(u => {
        axios.patch(`${api}/api/assignment/${u.id}`, { personId: u.personId }).catch(load);
      });
    };

    if (source.droppableId === 'people-all') {
      const personId = personFromPeople();
      if (dst.kind === 'cell') {
        setMany([{ id: dst.id, personId }]);
        patchMany([{ id: dst.id, personId }]);
      } else if (dst.kind === 'pair') {
        setMany([{ id: dst.a, personId }, { id: dst.b, personId }]);
        patchMany([{ id: dst.a, personId }, { id: dst.b, personId }]);
      }
      return;
    }

    if (src.kind === 'cell' && dst.kind === 'cell') {
      if (src.id === dst.id) return;
      const srcPerson = personFromAssign(src.id);
      const dstPerson = personFromAssign(dst.id);
      setMany([{ id: src.id, personId: dstPerson }, { id: dst.id, personId: srcPerson }]);
      patchMany([{ id: src.id, personId: dstPerson }, { id: dst.id, personId: srcPerson }]);
      return;
    }
    if (src.kind === 'pair' && dst.kind === 'pair') {
      const srcPerson = personFromAssign(src.a);
      const dstPerson = personFromAssign(dst.a);
      setMany([
        { id: src.a, personId: dstPerson }, { id: src.b, personId: dstPerson },
        { id: dst.a, personId: srcPerson }, { id: dst.b, personId: srcPerson },
      ]);
      patchMany([
        { id: src.a, personId: dstPerson }, { id: src.b, personId: dstPerson },
        { id: dst.a, personId: srcPerson }, { id: dst.b, personId: srcPerson },
      ]);
      return;
    }
    if (src.kind === 'cell' && dst.kind === 'pair') {
      const srcPerson = personFromAssign(src.id);
      const dstPerson = personFromAssign(dst.a);
      setMany([
        { id: src.id, personId: dstPerson },
        { id: dst.a, personId: srcPerson }, { id: dst.b, personId: srcPerson },
      ]);
      patchMany([
        { id: src.id, personId: dstPerson },
        { id: dst.a, personId: srcPerson }, { id: dst.b, personId: srcPerson },
      ]);
      return;
    }
    if (src.kind === 'pair' && dst.kind === 'cell') {
      const srcPerson = personFromAssign(src.a);
      const dstPerson = personFromAssign(dst.id);
      setMany([
        { id: src.a, personId: dstPerson }, { id: src.b, personId: dstPerson },
        { id: dst.id, personId: srcPerson },
      ]);
      patchMany([
        { id: src.a, personId: dstPerson }, { id: src.b, personId: dstPerson },
        { id: dst.id, personId: srcPerson },
      ]);
      return;
    }
  }

  return (
    <main className="p-6">
      {/* Header */}
      <div className="mb-4 flex items-center justify-between gap-2 flex-wrap">
        <div className="flex items-center gap-2 flex-wrap">
          <Link href="/" className="inline-flex items-center gap-2 border rounded px-3 py-1" title="Home">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" aria-hidden="true">
              <path d="M3 10.5 12 3l9 7.5V21a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1v-10.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/>
            </svg>
            Home
          </Link>
          <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
            {busy ? "Erzeuge…" : "Generate"}
          </button>
          <input
            type="date"
            className="border rounded px-2 py-1"
            step={7}
            min={MONDAY_BASE_ISO}
            value={startDate || ''}
            onChange={(e)=>handleDateChange(e.target.value)}
            title="Start-Montag"
          />
        </div>

        <div className="flex items-center gap-3">
          {plan?.startsOn && (
            <span className="text-sm text-gray-600">
              Status: <b>{plan.status}</b> • Start: {new Intl.DateTimeFormat("de-CH", { day: "2-digit", month: "2-digit" }).format(new Date(plan.startsOn))}
            </span>
          )}
          <button className="border rounded px-3 py-1" onClick={publish} disabled={busy || !plan?.id}>
            {busy ? "Publiziere…" : "Publish"}
          </button>
        </div>
      </div>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="flex gap-4">
          {/* Sidebar: add + list */}
          <div className="w-72 space-y-4">
            <div className="border rounded p-2">
              <div className="font-medium mb-2">Neue Person</div>
              <input
                className="border rounded w-full px-2 py-1 mb-2"
                placeholder="Name"
                value={newName}
                onChange={(e)=>setNewName(e.target.value)}
              />
              <button className="border rounded px-2 py-1 w-full" onClick={addPerson}>Hinzufügen</button>
              <p className="mt-2 text-xs text-gray-500">Neue Personen starten ohne Rechte. Schalte unten „W“ / „B“ frei.</p>
            </div>

            <Droppable droppableId="people-all" isDropDisabled>
              {provided => (
                <div ref={provided.innerRef} {...provided.droppableProps} className="border rounded p-2 h-[65vh] overflow-auto">
                  <div className="font-medium mb-2">Personen</div>
                  {people.map((p, idx)=>(
                    <Draggable draggableId={`person-${p.id}`} index={idx} key={`p-${p.id}`}>
                      {pProvided => (
                        <div ref={pProvided.innerRef} {...pProvided.draggableProps} {...pProvided.dragHandleProps} className="border rounded px-2 py-1 mb-1 bg-white">
                          <div className="flex items-center justify-between gap-2">
                            <div className="min-w-0">
                              <div className="truncate font-medium">{p.name}</div>
                              <div className="mt-0.5 flex items-center gap-1">
                                <Badge active={p.activeWeekly}>W</Badge>
                                <Badge active={p.activeBiweekly}>B</Badge>
                              </div>
                            </div>
                            <div className="flex items-center gap-3 text-xs">
                              <label className="flex items-center gap-1">
                                <input type="checkbox" checked={p.activeWeekly} onChange={()=>toggleFlag(p,'activeWeekly')} /> W
                              </label>
                              <label className="flex items-center gap-1">
                                <input type="checkbox" checked={p.activeBiweekly} onChange={()=>toggleFlag(p,'activeBiweekly')} /> B
                              </label>
                              {/* Urlaub button PER PERSON */}
                              <button
                                className="underline text-xs"
                                title="Urlaub hinzufügen"
                                onClick={async ()=>{
                                  const from = prompt("Urlaub von (YYYY-MM-DD)");
                                  const to   = prompt("Urlaub bis (YYYY-MM-DD)");
                                  if (!from || !to) return;
                                  try {
                                    const cur = (await axios.get(`${api}/api/people/${p.id}/unavailable`)).data as any[];
                                    cur.push({ from, to });
                                    await axios.patch(`${api}/api/people/${p.id}/unavailable`, { unavailable: cur });
                                    await load();
                                  } catch {}
                                }}
                              >
                                Urlaub
                              </button>
                              <button className="text-red-600" title="Löschen" onClick={(e)=>{ e.stopPropagation(); deletePerson(p); }}>✕</button>
                            </div>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </div>

          {/* Grid */}
          <div className="overflow-auto">
            <table className="min-w-full border text-sm table-sticky">
              <thead>
                <tr>
                  <th className="cell-task">Task</th>
                  {Array.from({length:16}, (_,i)=>(
                    <th key={i} className="cell">{mondayLabel(i)}</th>
                  ))}
                </tr>
              </thead>

              <tbody>
                {/* Weekly rows */}
                {weeklyTasks.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {Array.from({length:16}, (_,week)=>{
                      const a = cell(t.id, week);
                      const label = a ? personName(a.personId) : '—';
                      return (
                        <Droppable key={week} droppableId={`cell:${a?.id ?? -1}:weekly`}>
                          {provided => (
                            <td ref={provided.innerRef} {...provided.droppableProps} className={`cell ${a?.personId==null ? 'cell-off' : ''}`}>
                              {a?.personId != null ? (
                                <Draggable draggableId={`assign-${a.id}`} index={0}>
                                  {p => (
                                    <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps} className="border rounded px-2 py-1 bg-white inline-block">
                                      {label}
                                    </div>
                                  )}
                                </Draggable>
                              ) : <span className="text-gray-500">{label}</span>}
                              {provided.placeholder}
                            </td>
                          )}
                        </Droppable>
                      );
                    })}
                  </tr>
                ))}

                <tr><td colSpan={17} className="separator" /></tr>

                {/* Bi-weekly rows with 2-week merge */}
                {biweeklyTasks.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {(() => {
                      const tds: ReactNode[] = [];
                      for (let week = 0; week < 16; ) {
                        const a0 = cell(t.id, week);
                        const a1 = week + 1 < 16 ? cell(t.id, week + 1) : null;
                        const canMerge = !!(a0 && a1 && a0.personId != null && a1.personId === a0.personId);

                        if (canMerge) {
                          const label = personName(a0!.personId);
                          tds.push(
                            <Droppable key={`pair-${week}`} droppableId={`pair:${a0!.id}:${a1!.id}`}>
                              {provided => (
                                <td ref={provided.innerRef} {...provided.droppableProps} colSpan={2} className="cell cell-biweekly">
                                  <Draggable draggableId={`assign-${a0!.id}`} index={0}>
                                    {p => (
                                      <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps} className="border rounded px-2 py-1 bg-white inline-block">
                                        {label}
                                      </div>
                                    )}
                                  </Draggable>
                                  {provided.placeholder}
                                </td>
                              )}
                            </Droppable>
                          );
                          week += 2;
                        } else {
                          const label = a0 ? personName(a0.personId) : '—';
                          tds.push(
                            <Droppable key={week} droppableId={`cell:${a0?.id ?? -1}:biweekly`}>
                              {provided => (
                                <td ref={provided.innerRef} {...provided.droppableProps} className={`cell cell-biweekly ${a0?.personId==null ? 'cell-off' : ''}`}>
                                  {a0?.personId != null ? (
                                    <Draggable draggableId={`assign-${a0.id}`} index={0}>
                                      {p => (
                                        <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps} className="border rounded px-2 py-1 bg-white inline-block">
                                          {label}
                                        </div>
                                      )}
                                    </Draggable>
                                  ) : <span className="text-gray-500">{label}</span>}
                                  {provided.placeholder}
                                </td>
                              )}
                            </Droppable>
                          );
                          week += 1;
                        }
                      }
                      return tds;
                    })()}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Counts table */}
        <div className="mb-4 mt-4 overflow-x-auto">
          <h3 className="font-medium mb-2">Zuteilungen (16 Wochen)</h3>
          <table className="min-w-[480px] text-sm border">
            <thead>
              <tr>
                <th className="px-2 py-1 border text-left">Person</th>
                <th className="px-2 py-1 border text-right">Weekly</th>
                <th className="px-2 py-1 border text-right">Bi-weekly</th>
                <th className="px-2 py-1 border text-right">Total</th>
              </tr>
            </thead>
            <tbody>
              {counts.map(r=>(
                <tr key={r.personId}>
                  <td className="px-2 py-1 border">{r.name}</td>
                  <td className="px-2 py-1 border text-right">{r.weekly}</td>
                  <td className="px-2 py-1 border text-right">{r.biweekly}</td>
                  <td className="px-2 py-1 border text-right font-medium">{r.total}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </DragDropContext>

      {/* Feste & Ehren Ämtli */}
      <div className="mt-6 border rounded p-3">
        <div className="font-medium mb-2">Feste & Ehren Ämtli</div>
        <div className="flex gap-2 mb-2">
          <button className="border rounded px-2 py-1" onClick={()=>addDuty('FIXED')}>+ Feste Ämtli</button>
          <button className="border rounded px-2 py-1" onClick={()=>addDuty('HONOR')}>+ Ehren Ämtli</button>
        </div>
        {(['FIXED','HONOR'] as const).map(kind=>(
          <div key={kind} className="mb-3">
            <div className="text-xs font-semibold mb-1">{kind==='FIXED' ? 'Feste Ämtli' : 'Ehren Ämtli'}</div>
            {(duties.filter(d=>d.kind===kind).sort((a,b)=>a.order-b.order)).map(d=>(
              <div key={d.id} className="flex items-center gap-2 mb-1">
                <input className="border rounded px-2 py-1 flex-1" value={d.label}
                  onChange={e=>updateDuty(d,{label:e.target.value})}/>
                <input className="border rounded px-2 py-1 flex-1" value={d.assignees}
                  onChange={e=>updateDuty(d,{assignees:e.target.value})} placeholder="Sven,tbd,tbd"/>
                <input className="border rounded px-2 py-1 w-16" type="number" value={d.order}
                  onChange={e=>updateDuty(d,{order:Number(e.target.value)})}/>
                <button className="text-red-600" onClick={()=>deleteDuty(d)}>✕</button>
              </div>
            ))}
          </div>
        ))}
      </div>

      {/* Schämtliliste */}
      <div className="mt-6 border rounded p-3">
        <div className="font-medium mb-2">Schämtliliste</div>
        {people.map(p=>(
          <div key={p.id} className="flex items-center gap-2 mb-1">
            <div className="w-40 truncate">{p.name}</div>
            <button className="border rounded px-2 py-0.5"
              onClick={async ()=>{
                await axios.patch(`${api}/api/people/${p.id}`, { shameCount: (p.shameCount ?? 0) + 1 });
                await load();
              }}>+1</button>
            <span className="text-sm text-gray-600"> {p.shameCount ?? 0} </span>
            <button className="border rounded px-2 py-0.5"
              onClick={async ()=>{
                await axios.patch(`${api}/api/people/${p.id}`, { shameCount: 0 });
                await load();
              }}>Reset</button>
          </div>
        ))}
      </div>
    </main>
  );
}
