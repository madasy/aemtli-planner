'use client';

import { useEffect, useMemo, useState } from 'react';
import axios from 'axios';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';

type Task = { id:number; slug:string; title:string; cadence:'weekly'|'biweekly' };
type Assignment = { id:number; planId:string; taskId:number; weekIndex:number; personId:number|null; autoGenerated:boolean };
type Person = { id:number; name:string };
type AdminPlanResponse = {
  empty?: boolean;
  plan: { id:string; startsOn:string; weeks:number; status:string } | null;
  tasks: Task[];
  assignments: Assignment[];
  people: Person[];
};

export default function AdminPage() {
  const api = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:4000';

  const [loading, setLoading] = useState(true);
  const [empty, setEmpty] = useState(false);
  const [plan, setPlan] = useState<AdminPlanResponse['plan']>(null);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [assignments, setAssignments] = useState<Assignment[]>([]);
  const [people, setPeople] = useState<Person[]>([]);
  const [filterPerson, setFilterPerson] = useState<number | 'all'>('all');
  const [busy, setBusy] = useState(false);

  async function load() {
    setLoading(true);
    try {
      const [r1, r2] = await Promise.all([
        axios.get<AdminPlanResponse>(`${api}/api/admin/plan`),
        axios.get<Person[]>(`${api}/api/people`),
      ]);

      const d = r1.data ?? {};
      setEmpty(!!d.empty || !d.plan);
      setPlan(d.plan ?? null);
      setTasks(d.tasks ?? []);
      setAssignments(d.assignments ?? []);
      setPeople(r2.data ?? []);
    } catch {
      // If anything goes wrong, show empty state instead of crashing
      setEmpty(true);
      setPlan(null);
      setTasks([]); setAssignments([]); setPeople([]);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, []);

  async function generate() {
    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/generate`);
      await load();
    } finally {
      setBusy(false);
    }
  }

  async function publish() {
    if (!plan?.id) return;
    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/${plan.id}/publish`);
      await load();
    } finally {
      setBusy(false);
    }
  }

  function mondayLabel(week:number) {
    if (!plan?.startsOn) return '??.??';
    const start = new Date(plan.startsOn);
    start.setDate(start.getDate() + (week * 7));
    return new Intl.DateTimeFormat('de-CH',{day:'2-digit',month:'2-digit'}).format(start);
  }

  function personName(id:number|null) {
    if (id==null) return '— frei —';
    return people.find(p=>p.id===id)?.name ?? '—';
  }

  // build a 2D map: [taskId][week] -> assignment
  const cell = useMemo(() => {
    const map = new Map<number, Map<number, Assignment>>();
    for (const a of assignments) {
      const byTask = map.get(a.taskId) ?? new Map<number, Assignment>();
      byTask.set(a.weekIndex, a);
      map.set(a.taskId, byTask);
    }
    return (taskId:number, week:number) => map.get(taskId)?.get(week) || null;
  }, [assignments]);

  // Drag types: "person" from sidebar; "cell" from a cell (swap)
  function onDragEnd(result: DropResult) {
    const { draggableId, source, destination } = result;
    if (!destination) return;

    const dest = destination.droppableId.split(':');  // cell:<assignmentId>
    if (dest[0] !== 'cell') return;
    const destAssignId = Number(dest[1]);

    if (source.droppableId.startsWith('cell')) {
      // swap between two cells
      const srcAssignId = Number(source.droppableId.split(':')[1]);
      if (srcAssignId === destAssignId) return;

      const src = assignments.find(a=>a.id===srcAssignId)!;
      const dst = assignments.find(a=>a.id===destAssignId)!;

      // swap locally
      setAssignments(prev => prev.map(a => {
        if (a.id === srcAssignId) return { ...a, personId: dst.personId };
        if (a.id === destAssignId) return { ...a, personId: src.personId };
        return a;
      }));

      // persist both
      axios.patch(`${api}/api/assignment/${srcAssignId}`, { personId: dst.personId }).catch(load);
      axios.patch(`${api}/api/assignment/${destAssignId}`, { personId: src.personId }).catch(load);
    } else if (source.droppableId === 'people') {
      // assign from people list into a cell (replace)
      const personId = Number(draggableId.replace('person-', ''));
      setAssignments(prev => prev.map(a => a.id===destAssignId ? ({ ...a, personId }) : a));
      axios.patch(`${api}/api/assignment/${destAssignId}`, { personId }).catch(load);
    }
  }

  if (loading) return <main className="p-6">Lade…</main>;

  // ⬇️ Ultra-safe: if no plan yet, render empty state and "Generate"
  if (empty || !plan) {
    return (
      <main className="p-6">
        <div className="mb-4 flex flex-wrap items-center gap-2">
          <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
            {busy ? 'Erzeuge…' : 'Generate 16 Weeks'}
          </button>
        </div>
        <p className="text-sm text-gray-600">Noch kein Plan vorhanden. Bitte „Generate 16 Weeks“ klicken.</p>
      </main>
    );
  }

  const weekly = tasks.filter(t=>t.cadence==='weekly');
  const biweekly = tasks.filter(t=>t.cadence==='biweekly');
  const filteredPeople = filterPerson === 'all' ? people : people.filter(p=>p.id===filterPerson);

  return (
    <main className="p-6">
      <div className="mb-4 flex flex-wrap items-center gap-2">
        <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
          {busy ? 'Erzeuge…' : 'Generate 16 Weeks'}
        </button>
        <button className="border rounded px-3 py-1" onClick={publish} disabled={busy || !plan?.id}>
          {busy ? 'Publiziere…' : 'Publish'}
        </button>

        <span className="ml-4 text-sm">Filter:</span>
        <select className="border rounded px-2 py-1" value={String(filterPerson)} onChange={e=>{
          const v = e.target.value === 'all' ? 'all' : Number(e.target.value);
          setFilterPerson(v);
        }}>
          <option value="all">Alle Personen</option>
          {people.map(p=><option key={p.id} value={p.id}>{p.name}</option>)}
        </select>
      </div>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="flex gap-4">
          {/* Sidebar people (draggable) */}
          <Droppable droppableId="people" isDropDisabled>
            {provided => (
              <div ref={provided.innerRef} {...provided.droppableProps} className="w-64 border rounded p-2 h-[70vh] overflow-auto">
                <div className="font-medium mb-2">People</div>
                {filteredPeople.map((p, idx)=>(
                  <Draggable draggableId={`person-${p.id}`} index={idx} key={p.id}>
                    {pProvided => (
                      <div
                        ref={pProvided.innerRef}
                        {...pProvided.draggableProps}
                        {...pProvided.dragHandleProps}
                        className="border rounded px-2 py-1 mb-1 bg-white"
                      >
                        {p.name}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>

          {/* Grid */}
          <div className="overflow-auto">
            <table className="min-w-full border text-sm table-sticky">
              <thead>
                <tr>
                  <th className="cell-task">Task</th>
                  {Array.from({length:16}, (_,i)=>(
                    <th key={i} className="cell">{mondayLabel(i)}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {/* weekly rows */}
                {weekly.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {Array.from({length:16}, (_,week)=>{
                      const a = cell(t.id, week);
                      const label = a ? personName(a.personId) : '—';
                      return (
                        <Droppable key={week} droppableId={`cell:${a?.id ?? -1}`}>
                          {provided => (
                            <td ref={provided.innerRef} {...provided.droppableProps} className={`cell ${a?.personId==null ? 'cell-off' : ''}`}>
                              {a?.personId != null && (
                                <Draggable draggableId={`assign-${a.id}`} index={0}>
                                  {p => (
                                    <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps} className="border rounded px-2 py-1 bg-white inline-block">
                                      {label}
                                    </div>
                                  )}
                                </Draggable>
                              )}
                              {a?.personId==null && <span className="text-gray-500">{label}</span>}
                              {provided.placeholder}
                            </td>
                          )}
                        </Droppable>
                      );
                    })}
                  </tr>
                ))}

                <tr><td colSpan={17} className="separator" /></tr>

                {/* biweekly rows */}
                {biweekly.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {Array.from({length:16}, (_,week)=>{
                      const a = cell(t.id, week);
                      const label = a ? personName(a.personId) : '—';
                      return (
                        <Droppable key={week} droppableId={`cell:${a?.id ?? -1}`}>
                          {provided => (
                            <td ref={provided.innerRef} {...provided.droppableProps} className={`cell cell-biweekly ${a?.personId==null ? 'cell-off' : ''}`}>
                              {a?.personId != null && (
                                <Draggable draggableId={`assign-${a.id}`} index={0}>
                                  {p => (
                                    <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps} className="border rounded px-2 py-1 bg-white inline-block">
                                      {label}
                                    </div>
                                  )}
                                </Draggable>
                              )}
                              {a?.personId==null && <span className="text-gray-500">{label}</span>}
                              {provided.placeholder}
                            </td>
                          )}
                        </Droppable>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </DragDropContext>
    </main>
  );
}
