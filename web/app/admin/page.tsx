'use client';

import { useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import axios from 'axios';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';

type Task = { id:number; slug:string; title:string; cadence:'weekly'|'biweekly' };
type Assignment = { id:number; planId:string; taskId:number; weekIndex:number; personId:number|null; autoGenerated:boolean };
type Person = { id:number; name:string; activeWeekly:boolean; activeBiweekly:boolean };

type AdminPlanResponse = {
  empty?: boolean;
  plan: { id:string; startsOn:string; weeks:number; status:string } | null;
  tasks: Task[];
  assignments: Assignment[];
  people: Person[];
};

export default function AdminPage() {
  const api = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:4000';

  const [loading, setLoading] = useState(true);
  const [empty, setEmpty] = useState(false);
  const [busy, setBusy] = useState(false);

  const [plan, setPlan]               = useState<AdminPlanResponse['plan']>(null);
  const [tasks, setTasks]             = useState<Task[]>([]);
  const [assignments, setAssignments] = useState<Assignment[]>([]);
  const [people, setPeople]           = useState<Person[]>([]);

  // add person (starts with no pool flags)
  const [newName, setNewName]         = useState('');

  // start date for generation
  const [startDate, setStartDate]     = useState<string>("");

  async function load() {
    setLoading(true);
    try {
      const [r1, r2] = await Promise.all([
        axios.get<AdminPlanResponse>(`${api}/api/admin/plan`),
        axios.get<Person[]>(`${api}/api/people`),
      ]);
      const d = r1.data ?? {};
      setEmpty(!!d.empty || !d.plan);
      setPlan(d.plan ?? null);
      setTasks(d.tasks ?? []);
      setAssignments(d.assignments ?? []);
      setPeople(r2.data ?? []);
    } finally {
      setLoading(false);
    }
  }
  useEffect(() => { load(); /* eslint-disable-line */ }, []);

  async function generate() {
    if (!startDate) {
      alert("Please select a start date first.");
      return;
    }
    if (!confirm("This will delete the current draft and create a new plan. Continue?")) return;

    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/generate`, { startDate });
      await load();
    } finally {
      setBusy(false);
    }
  }

  async function publish() {
    if (!plan?.id) return;
    setBusy(true);
    try {
      await axios.post(`${api}/api/plan/${plan.id}/publish`);
      await load();
    } finally {
      setBusy(false);
    }
  }

  // People CRUD
  async function addPerson() {
    const name = newName.trim();
    if (!name) return;
    await axios.post(`${api}/api/people`, {
      name,
      activeWeekly: false,
      activeBiweekly: false,
    });
    setNewName('');
    await load();
  }
  async function toggleFlag(p: Person, key: 'activeWeekly' | 'activeBiweekly') {
    await axios.patch(`${api}/api/people/${p.id}`, { [key]: !p[key] });
    await load();
  }
  async function deletePerson(p: Person) {
    if (!confirm(`“${p.name}” wirklich löschen?`)) return;
    await axios.delete(`${api}/api/people/${p.id}`);
    await load();
  }

  function mondayLabel(week:number) {
    if (!plan?.startsOn) return '??.??';
    const start = new Date(plan.startsOn);
    start.setDate(start.getDate() + (week * 7));
    return new Intl.DateTimeFormat('de-CH', { day:'2-digit', month:'2-digit' }).format(start);
  }
  function personName(id:number|null) {
    if (id==null) return '— frei —';
    return people.find(p=>p.id===id)?.name ?? '—';
  }

  // map: [taskId][week] -> assignment
  const cell = useMemo(() => {
    const map = new Map<number, Map<number, Assignment>>();
    for (const a of assignments) {
      const byTask = map.get(a.taskId) ?? new Map<number, Assignment>();
      byTask.set(a.weekIndex, a);
      map.set(a.taskId, byTask);
    }
    return (taskId:number, week:number) => map.get(taskId)?.get(week) || null;
  }, [assignments]);

  // quick lookup for task cadence by id
  const cadenceByTaskId = useMemo(() => {
    const m = new Map<number, Task['cadence']>();
    for (const t of tasks) m.set(t.id, t.cadence);
    return (taskId:number) => m.get(taskId) ?? 'weekly';
  }, [tasks]);

  // DnD — single list source: "people-all"
  function onDragEnd(result: DropResult) {
    const { draggableId, source, destination } = result;
    if (!destination) return;

    const [destType, destIdStr, destCadence] = destination.droppableId.split(':'); // "cell:<id>:<cadence>"
    if (destType !== 'cell') return;
    const destAssignId = Number(destIdStr);

    if (source.droppableId.startsWith('cell')) {
      // swap between cells
      const srcAssignId = Number(source.droppableId.split(':')[1]);
      if (srcAssignId === destAssignId) return;

      const src = assignments.find(a=>a.id===srcAssignId)!;
      const dst = assignments.find(a=>a.id===destAssignId)!;

      // enforce pool rules on swap targets (dest)
      if (dst && dst.taskId) {
        const destC = cadenceByTaskId(dst.taskId);
        const srcPerson = src?.personId ? people.find(p=>p.id===src.personId) : null;
        if (srcPerson) {
          if (destC === 'biweekly' && !srcPerson.activeBiweekly) return;
          if (destC === 'weekly'   && !srcPerson.activeWeekly)   return;
        }
      }
      if (src && src.taskId) {
        const srcC = cadenceByTaskId(src.taskId);
        const dstPerson = dst?.personId ? people.find(p=>p.id===dst.personId) : null;
        if (dstPerson) {
          if (srcC === 'biweekly' && !dstPerson.activeBiweekly) return;
          if (srcC === 'weekly'   && !dstPerson.activeWeekly)   return;
        }
      }

      // swap locally
      setAssignments(prev => prev.map(a => {
        if (a.id === srcAssignId)  return { ...a, personId: dst.personId };
        if (a.id === destAssignId) return { ...a, personId: src.personId };
        return a;
      }));
      // persist
      axios.patch(`${api}/api/assignment/${srcAssignId}`,  { personId: assignments.find(a=>a.id===destAssignId)?.personId ?? null }).catch(load);
      axios.patch(`${api}/api/assignment/${destAssignId}`, { personId: assignments.find(a=>a.id===srcAssignId)?.personId ?? null }).catch(load);

    } else if (source.droppableId === 'people-all') {
      // assign from the single people list
      const personId = Number(draggableId.replace('person-', ''));
      const person = people.find(p=>p.id===personId);
      if (!person) return;

      // enforce pool rules: only W into weekly, only B into biweekly
      if (destCadence === 'biweekly' && !person.activeBiweekly) return;
      if (destCadence === 'weekly'   && !person.activeWeekly)   return;

      setAssignments(prev => prev.map(a => a.id===destAssignId ? ({ ...a, personId }) : a));
      axios.patch(`${api}/api/assignment/${destAssignId}`, { personId }).catch(load);
    }
  }

  if (loading) return <main className="p-6">Lade…</main>;
  if (empty || !plan) {
    return (
      <main className="p-6 space-y-3">
        <div className="flex items-center gap-2">
          <input
            type="date"
            value={startDate}
            onChange={(e)=>setStartDate(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
            {busy ? 'Erzeuge…' : 'Generate'}
          </button>
          <Link href="/" className="underline ml-2">Home</Link>
        </div>
        <p className="text-sm text-gray-600">Generating will delete the current draft (if any) and create a new plan starting on the selected date.</p>
      </main>
    );
  }

  const weeklyTasks   = tasks.filter(t=>t.cadence==='weekly');
  const biweeklyTasks = tasks.filter(t=>t.cadence==='biweekly');

  // helper: colored badge
  const Badge = ({ children, active }: { children: React.ReactNode; active: boolean }) => (
    <span className={`px-1.5 py-0.5 text-[11px] rounded ${active ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-400'}`}>
      {children}
    </span>
  );

  return (
    <main className="p-6">
      <div className="mb-3 flex flex-wrap items-center gap-2">
        <input
          type="date"
          value={startDate}
          onChange={(e)=>setStartDate(e.target.value)}
          className="border rounded px-2 py-1"
        />
        <button className="border rounded px-3 py-1" onClick={generate} disabled={busy}>
          {busy ? 'Erzeuge…' : 'Generate'}
        </button>
        <button className="border rounded px-3 py-1" onClick={publish} disabled={busy || !plan?.id}>
          {busy ? 'Publiziere…' : 'Publish'}
        </button>
        <Link href="/" className="underline ml-2">Home</Link>
        {plan?.startsOn && (
          <span className="text-sm text-gray-600 ml-2">
            Status: <b>{plan.status}</b> • Start: {mondayLabel(0)}
          </span>
        )}
      </div>
      <p className="text-xs text-gray-500 mb-4">
        Generating will delete the current draft (if any) and create a new plan starting on the selected date.
      </p>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="flex gap-4">
          {/* Sidebar: Add + single people list (with W/B badges + toggles) */}
          <div className="w-72 space-y-4">
            {/* Add person (no flags) */}
            <div className="border rounded p-2">
              <div className="font-medium mb-2">Neue Person</div>
              <input
                className="border rounded w-full px-2 py-1 mb-2"
                placeholder="Name"
                value={newName}
                onChange={(e)=>setNewName(e.target.value)}
              />
              <button className="border rounded px-2 py-1 w-full" onClick={addPerson}>Hinzufügen</button>
              <p className="mt-2 text-xs text-gray-500">
                Neue Personen starten ohne Rechte. Schalte unten „W“ (Weekly) / „B“ (Bi-weekly) frei.
              </p>
            </div>

            <Droppable droppableId="people-all" isDropDisabled>
              {provided => (
                <div ref={provided.innerRef} {...provided.droppableProps} className="border rounded p-2 h-[65vh] overflow-auto">
                  <div className="font-medium mb-2">Personen</div>
                  {people.map((p, idx)=>(
                    <Draggable draggableId={`person-${p.id}`} index={idx} key={`p-${p.id}`}>
                      {pProvided => (
                        <div
                          ref={pProvided.innerRef}
                          {...pProvided.draggableProps}
                          {...pProvided.dragHandleProps}
                          className="border rounded px-2 py-1 mb-1 bg-white"
                        >
                          <div className="flex items-center justify-between gap-2">
                            <div className="min-w-0">
                              <div className="truncate font-medium">{p.name}</div>
                              <div className="mt-0.5 flex items-center gap-1">
                                <Badge active={p.activeWeekly}>W</Badge>
                                <Badge active={p.activeBiweekly}>B</Badge>
                              </div>
                            </div>
                            <div className="flex items-center gap-3 text-xs">
                              <label className="flex items-center gap-1">
                                <input
                                  type="checkbox"
                                  checked={p.activeWeekly}
                                  onChange={()=>toggleFlag(p,'activeWeekly')}
                                />
                                W
                              </label>
                              <label className="flex items-center gap-1">
                                <input
                                  type="checkbox"
                                  checked={p.activeBiweekly}
                                  onChange={()=>toggleFlag(p,'activeBiweekly')}
                                />
                                B
                              </label>
                              <button
                                className="text-red-600"
                                title="Löschen"
                                onClick={(e)=>{ e.stopPropagation(); deletePerson(p); }}
                              >
                                ✕
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </div>

          {/* Grid */}
          <div className="overflow-auto">
            <table className="min-w-full border text-sm table-sticky">
              <thead>
                <tr>
                  <th className="cell-task">Task</th>
                  {Array.from({length:16}, (_,i)=>(
                    <th key={i} className="cell">{mondayLabel(i)}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {/* Weekly */}
                {weeklyTasks.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {Array.from({length:16}, (_,week)=>{
                      const a = cell(t.id, week);
                      const label = a ? personName(a.personId) : '—';
                      return (
                        <Droppable key={week} droppableId={`cell:${a?.id ?? -1}:weekly`}>
                          {provided => (
                            <td ref={provided.innerRef} {...provided.droppableProps}
                                className={`cell ${a?.personId==null ? 'cell-off' : ''}`}>
                              {a?.personId != null ? (
                                <Draggable draggableId={`assign-${a.id}`} index={0}>
                                  {p => (
                                    <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps}
                                         className="border rounded px-2 py-1 bg-white inline-block">
                                      {label}
                                    </div>
                                  )}
                                </Draggable>
                              ) : <span className="text-gray-500">{label}</span>}
                              {provided.placeholder}
                            </td>
                          )}
                        </Droppable>
                      );
                    })}
                  </tr>
                ))}

                <tr><td colSpan={17} className="separator" /></tr>

                {/* Bi-weekly */}
                {biweeklyTasks.map(t=>(
                  <tr key={t.id}>
                    <td className="cell-task">{t.title}</td>
                    {Array.from({length:16}, (_,week)=>{
                      const a = cell(t.id, week);
                      const label = a ? personName(a.personId) : '—';
                      return (
                        <Droppable key={week} droppableId={`cell:${a?.id ?? -1}:biweekly`}>
                          {provided => (
                            <td ref={provided.innerRef} {...provided.droppableProps}
                                className={`cell cell-biweekly ${a?.personId==null ? 'cell-off' : ''}`}>
                              {a?.personId != null ? (
                                <Draggable draggableId={`assign-${a.id}`} index={0}>
                                  {p => (
                                    <div ref={p.innerRef} {...p.draggableProps} {...p.dragHandleProps}
                                         className="border rounded px-2 py-1 bg-white inline-block">
                                      {label}
                                    </div>
                                  )}
                                </Draggable>
                              ) : <span className="text-gray-500">{label}</span>}
                              {provided.placeholder}
                            </td>
                          )}
                        </Droppable>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </DragDropContext>
    </main>
  );
}
